{"ast":null,"code":"var _jsxFileName = \"/Users/berkanyuce/Desktop/Desktop/Workintech/Kis\\u0327isel Projeler/tf-serving-project/frontend/src/components/ResultPredictForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\n\n// Utility function to convert image to a 32x32x3 matrix\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst processImage = async file => {\n  const img = new Image();\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n  const reader = new FileReader();\n  return new Promise((resolve, reject) => {\n    reader.onload = () => {\n      img.src = reader.result;\n    };\n    img.onload = () => {\n      canvas.width = 32;\n      canvas.height = 32;\n      ctx.drawImage(img, 0, 0, 32, 32);\n      const imageData = ctx.getImageData(0, 0, 32, 32);\n      const data = imageData.data;\n      const matrix = [];\n      for (let i = 0; i < 32; i++) {\n        const row = [];\n        for (let j = 0; j < 32; j++) {\n          const index = (i * 32 + j) * 4;\n          const r = data[index] / 255;\n          const g = data[index + 1] / 255;\n          const b = data[index + 2] / 255;\n          row.push([r, g, b]); // RGB values\n        }\n        matrix.push(row);\n      }\n      resolve(matrix);\n    };\n    img.onerror = err => reject(err);\n    reader.readAsDataURL(file);\n  });\n};\nconst ResultPredictForm = () => {\n  _s();\n  const [imageData, setImageData] = useState(null);\n  const [response, setResponse] = useState(null);\n  const [error, setError] = useState(null);\n  const handleImageChange = async e => {\n    const file = e.target.files[0];\n    if (file) {\n      try {\n        const imgData = await processImage(file);\n        console.log(\"Image data processed:\", imgData); // Debugging\n        setImageData(imgData);\n      } catch (err) {\n        console.error(\"Error processing image\", err);\n        setError(\"Failed to process image\");\n      }\n    }\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (!imageData) {\n      setError(\"No image data available\");\n      return;\n    }\n    try {\n      const result = await axios.post('http://localhost:8000/predict/result_model', {\n        conv2d_input: imageData\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        timeout: 5000\n      });\n      console.log(\"Response data:\", result.data);\n      if (result.data && result.data.predicted_class) {\n        const predictions = result.data.probabilities;\n        const predictedClass = result.data.predicted_class;\n        setResponse({\n          predictedClass,\n          probabilities: predictions\n        });\n      } else {\n        console.log(\"Predictions data is not available.\");\n        setError(\"Prediction data is not available.\");\n      }\n    } catch (error) {\n      console.log(\"Error details:\", error);\n      setError(error.response ? error.response.data : 'An error occurred');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Upload Image for Prediction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        onChange: handleImageChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), response && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Predicted Class: \", response.predictedClass]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Probabilities: \", JSON.stringify(response.probabilities)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", JSON.stringify(error)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s(ResultPredictForm, \"7u8z5NdR+KcZ/HE1SEvw7388pHc=\");\n_c = ResultPredictForm;\nexport default ResultPredictForm;\nvar _c;\n$RefreshReg$(_c, \"ResultPredictForm\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","processImage","file","img","Image","canvas","document","createElement","ctx","getContext","reader","FileReader","Promise","resolve","reject","onload","src","result","width","height","drawImage","imageData","getImageData","data","matrix","i","row","j","index","r","g","b","push","onerror","err","readAsDataURL","ResultPredictForm","_s","setImageData","response","setResponse","error","setError","handleImageChange","e","target","files","imgData","console","log","handleSubmit","event","preventDefault","post","conv2d_input","headers","timeout","predicted_class","predictions","probabilities","predictedClass","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/berkanyuce/Desktop/Desktop/Workintech/KisÌ§isel Projeler/tf-serving-project/frontend/src/components/ResultPredictForm.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\n// Utility function to convert image to a 32x32x3 matrix\nconst processImage = async (file) => {\n  const img = new Image();\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n  const reader = new FileReader();\n\n  return new Promise((resolve, reject) => {\n    reader.onload = () => {\n      img.src = reader.result;\n    };\n\n    img.onload = () => {\n      canvas.width = 32;\n      canvas.height = 32;\n      ctx.drawImage(img, 0, 0, 32, 32);\n\n      const imageData = ctx.getImageData(0, 0, 32, 32);\n      const data = imageData.data;\n      const matrix = [];\n\n      for (let i = 0; i < 32; i++) {\n        const row = [];\n        for (let j = 0; j < 32; j++) {\n          const index = (i * 32 + j) * 4;\n          const r = data[index] / 255;\n          const g = data[index + 1] / 255;\n          const b = data[index + 2] / 255;\n          row.push([r, g, b]); // RGB values\n        }\n        matrix.push(row);\n      }\n\n      resolve(matrix);\n    };\n\n    img.onerror = (err) => reject(err);\n    reader.readAsDataURL(file);\n  });\n};\n\nconst ResultPredictForm = () => {\n  const [imageData, setImageData] = useState(null);\n  const [response, setResponse] = useState(null);\n  const [error, setError] = useState(null);\n\n  const handleImageChange = async (e) => {\n    const file = e.target.files[0];\n    if (file) {\n      try {\n        const imgData = await processImage(file);\n        console.log(\"Image data processed:\", imgData); // Debugging\n        setImageData(imgData);\n      } catch (err) {\n        console.error(\"Error processing image\", err);\n        setError(\"Failed to process image\");\n      }\n    }\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    if (!imageData) {\n      setError(\"No image data available\");\n      return;\n    }\n\n    try {\n      const result = await axios.post('http://localhost:8000/predict/result_model', {\n        conv2d_input: imageData\n      }, {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        timeout: 5000\n      });\n\n      console.log(\"Response data:\", result.data);\n\n      if (result.data && result.data.predicted_class) {\n        const predictions = result.data.probabilities;\n        const predictedClass = result.data.predicted_class;\n        setResponse({ predictedClass, probabilities: predictions });\n      } else {\n        console.log(\"Predictions data is not available.\");\n        setError(\"Prediction data is not available.\");\n      }\n    } catch (error) {\n      console.log(\"Error details:\", error);\n      setError(error.response ? error.response.data : 'An error occurred');\n    }\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <h1>Upload Image for Prediction</h1>\n        <input type=\"file\" accept=\"image/*\" onChange={handleImageChange} />\n        <button type=\"submit\">Submit</button>\n      </form>\n      {response && (\n        <div>\n          <p>Predicted Class: {response.predictedClass}</p>\n          <p>Probabilities: {JSON.stringify(response.probabilities)}</p>\n        </div>\n      )}\n      {error && <div>Error: {JSON.stringify(error)}</div>}\n    </div>\n  );\n};\n\nexport default ResultPredictForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}