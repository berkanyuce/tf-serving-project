{"ast":null,"code":"var _jsxFileName = \"/Users/berkanyuce/Desktop/Desktop/Workintech/Kis\\u0327isel Projeler/tf-serving-project/frontend/src/components/PredictForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CLASS_LABELS = [\"Setosa\", \"Versicolor\", \"Virginica\"];\nconst PredictForm = () => {\n  _s();\n  const [inputData, setInputData] = useState({\n    dense_2_input: [5.1, 3.5, 1.4, 0.2]\n  });\n  const [response, setResponse] = useState(null);\n  const [error, setError] = useState(null);\n  const handleSubmit = async event => {\n    event.preventDefault();\n    try {\n      const result = await axios.post('http://localhost:8000/predict/iris_model', inputData, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log(\"Response data:\", result.data); // Yanıtın yapısını kontrol et\n\n      // Yanıtın varlığını kontrol et\n      if (result.data && result.data.predictions && result.data.predictions.length > 0) {\n        const predictions = result.data.predictions[0];\n        const maxPredictionIndex = predictions.indexOf(Math.max(...predictions));\n        const predictedClass = CLASS_LABELS[maxPredictionIndex];\n        setResponse({\n          predictedClass,\n          probabilities: predictions\n        });\n      } else {\n        console.log(\"Predictions data is not available.\");\n        setError(\"Prediction data is not available.\");\n      }\n    } catch (error) {\n      console.log(\"Error details:\", error);\n      setError(error.response ? error.response.data : 'An error occurred');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send Request\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), response && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Predicted Class: \", response.predictedClass]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Probabilities: \", JSON.stringify(response.probabilities)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", JSON.stringify(error)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(PredictForm, \"/edAnEz9cbEbLXmfxCfcKNCVIGo=\");\n_c = PredictForm;\nexport default PredictForm;\nvar _c;\n$RefreshReg$(_c, \"PredictForm\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","CLASS_LABELS","PredictForm","_s","inputData","setInputData","dense_2_input","response","setResponse","error","setError","handleSubmit","event","preventDefault","result","post","headers","console","log","data","predictions","length","maxPredictionIndex","indexOf","Math","max","predictedClass","probabilities","children","onSubmit","type","fileName","_jsxFileName","lineNumber","columnNumber","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/berkanyuce/Desktop/Desktop/Workintech/Kişisel Projeler/tf-serving-project/frontend/src/components/PredictForm.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\nconst CLASS_LABELS = [\"Setosa\", \"Versicolor\", \"Virginica\"];\n\nconst PredictForm = () => {\n  const [inputData, setInputData] = useState({\n    dense_2_input: [5.1, 3.5, 1.4, 0.2],\n  });\n  const [response, setResponse] = useState(null);\n  const [error, setError] = useState(null);\n\n  const handleSubmit = async (event) => {\n  event.preventDefault();\n  try {\n    const result = await axios.post('http://localhost:8000/predict/iris_model', inputData, {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    console.log(\"Response data:\", result.data); // Yanıtın yapısını kontrol et\n\n    // Yanıtın varlığını kontrol et\n    if (result.data && result.data.predictions && result.data.predictions.length > 0) {\n      const predictions = result.data.predictions[0];\n      const maxPredictionIndex = predictions.indexOf(Math.max(...predictions));\n      const predictedClass = CLASS_LABELS[maxPredictionIndex];\n      setResponse({ predictedClass, probabilities: predictions });\n    } else {\n      console.log(\"Predictions data is not available.\");\n      setError(\"Prediction data is not available.\");\n    }\n  } catch (error) {\n    console.log(\"Error details:\", error);\n    setError(error.response ? error.response.data : 'An error occurred');\n  }\n};\n\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <button type=\"submit\">Send Request</button>\n      </form>\n      {response && (\n        <div>\n          <p>Predicted Class: {response.predictedClass}</p>\n          <p>Probabilities: {JSON.stringify(response.probabilities)}</p>\n        </div>\n      )}\n      {error && <div>Error: {JSON.stringify(error)}</div>}\n    </div>\n  );\n};\n\nexport default PredictForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}